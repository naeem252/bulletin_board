{"version":3,"sources":["Note.js","Board.js","serviceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editin","edit","bind","assertThisInitialized","remove","renderDisplay","renderForm","save","randomBetween","style","right","window","innerWidth","top","innerHeight","transform","concat","x","y","s","Math","ceil","random","textArea","editing","text","focus","select","setState","onRemove","index","e","preventDefault","onChange","value","_this2","react_default","a","createElement","className","onSubmit","ref","data","defaultValue","children","id","onClick","React","Component","Board","notes","update","eachNote","add","nextId","self","count","fetch","then","response","json","split","forEach","sentence","substring","newText","i","prevState","map","note","objectSpread","filter","toConsumableArray","uniqueId","src_Note","key","class","Boolean","location","hostname","match","ReactDOM","render","src_Board","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb85952b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Note extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            editin:false\r\n        }\r\n        this.edit=this.edit.bind(this);\r\n        this.remove=this.remove.bind(this);\r\n        this.renderDisplay=this.renderDisplay.bind(this);\r\n        this.renderForm=this.renderForm.bind(this);\r\n        this.save=this.save.bind(this)\r\n        this.randomBetween=this.randomBetween.bind(this)\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.style={\r\n            right:this.randomBetween(0,window.innerWidth-150,'px'),\r\n            top:this.randomBetween(0,window.innerHeight-150,'px'),\r\n            transform:`rotate(${this.randomBetween(-25,25,'deg')})`\r\n        }\r\n    }\r\n\r\n\r\n    randomBetween(x,y,s){\r\n        return x +Math.ceil(Math.random() * (y-x)) + s\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        var textArea\r\n        if(this.state.editing){\r\n            textArea=this.text\r\n            textArea.focus()\r\n            textArea.select()\r\n        }\r\n    }\r\n    edit(){\r\n       this.setState({\r\n           editing:true\r\n       })\r\n    }//edit\r\n    remove(){\r\n        this.props.onRemove(this.props.index)\r\n    }//remove\r\n    save(e){\r\n        e.preventDefault()\r\n        this.props.onChange(this.text.value,this.props.index)\r\n        this.setState({\r\n            editing:false\r\n        })\r\n        \r\n    }//save\r\n    renderForm(){\r\n        return(\r\n            <div className='note' style={this.style}>\r\n                <form onSubmit={this.save}>\r\n                    <textarea ref={data => this.text=data} defaultValue={this.props.children}></textarea>\r\n                    <button id=\"save\"><i className=\"far fa-save\"></i></button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }//renderForm\r\n    renderDisplay(){\r\n        return (\r\n            <div className=\"note\" style={this.style}>\r\n                <p>{this.props.children}</p>\r\n                <span>\r\n                    <button onClick={this.edit} id=\"edit\"><i className=\"fas fa-pencil-alt\"></i></button>\r\n                    <button onClick={this.remove} id=\"remove\"><i className=\"fas fa-trash-alt\"></i></button>\r\n                </span>\r\n            </div>\r\n        )\r\n    }//renderDisplay\r\n\r\n    render(){\r\n        return this.state.editing ? this.renderForm():this.renderDisplay()\r\n    }//renderMethod\r\n}//main\r\n\r\nexport default Note;","import React,{ Component } from 'react'\r\nimport Note from './Note'\r\n\r\nclass Board extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            notes:[]\r\n        }//state\r\n        this.update=this.update.bind(this)\r\n        this.eachNote=this.eachNote.bind(this)\r\n        this.remove=this.remove.bind(this)\r\n        this.add=this.add.bind(this)\r\n        this.nextId=this.nextId.bind(this)\r\n    }//constranctor\r\n\r\n    componentWillMount(){\r\n        var self=this;\r\n        if(this.props.count){\r\n            fetch(`https://baconipsum.com/api/?type=all-meat&sentences=${this.props.count}`)\r\n            .then(response => response.json())\r\n            .then(json => json[0].split('. ').forEach(sentence => self.add(sentence.substring(0,25))) )\r\n        }\r\n    }\r\n\r\n    update(newText,i){\r\n        this.setState(prevState => ({\r\n            notes:prevState.notes.map(\r\n                note => (note.id !== i) ? note : {...note , note:newText}\r\n            )\r\n        }))\r\n    }\r\n\r\n    remove(id){\r\n        this.setState(prevState => ({\r\n            notes:prevState.notes.filter(note => note.id !== id)\r\n        }))\r\n    }\r\n\r\n    add(text){\r\n        this.setState(prevState => ({\r\n            notes:[\r\n                ...prevState.notes,\r\n                {\r\n                    id:this.nextId(),\r\n                    note:text\r\n                }\r\n            ]\r\n        }))\r\n    }\r\n\r\n    nextId(){\r\n        this.uniqueId=this.uniqueId || 0\r\n        return this.uniqueId++\r\n    }\r\n\r\n    eachNote(note,i){\r\n        return(\r\n            <Note key={note.id} index={note.id} onChange={this.update} onRemove={this.remove}>\r\n                {note.note}\r\n            </Note>\r\n        )\r\n    }//eachNote\r\n\r\n    render(){\r\n        return(\r\n            <div className='board'>\r\n                {this.state.notes.map(this.eachNote)}\r\n                <button id=\"add\" onClick={this.add.bind(null,\"New Note\")}><i class=\"fas fa-cart-plus\"></i></button>\r\n            </div>\r\n        )\r\n    }\r\n}//main\r\nexport default Board","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Board';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board count={50} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}